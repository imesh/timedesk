// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.timedesk.web;

import java.io.UnsupportedEncodingException;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.annotation.PostConstruct;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import org.timedesk.entity.ProjectComponent;
import org.timedesk.entity.Task;

privileged aspect ProjectComponentController_Roo_Controller {
    
    @Autowired
    private GenericConversionService ProjectComponentController.conversionService;
    
    @RequestMapping(method = RequestMethod.POST)
    public String ProjectComponentController.create(@Valid ProjectComponent projectComponent, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("projectComponent", projectComponent);
            return "projectcomponents/create";
        }
        projectComponent.persist();
        return "redirect:/projectcomponents/" + encodeUrlPathSegment(projectComponent.getId().toString(), request);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ProjectComponentController.createForm(Model model) {
        model.addAttribute("projectComponent", new ProjectComponent());
        return "projectcomponents/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ProjectComponentController.show(@PathVariable("id") Long id, Model model) {
    	ProjectComponent component = ProjectComponent.findProjectComponent(id);
        model.addAttribute("projectcomponent", component);
        model.addAttribute("itemId", id);
        model.addAttribute("tasks", component.getTasks());
        return "projectcomponents/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ProjectComponentController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("projectcomponents", ProjectComponent.findProjectComponentEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ProjectComponent.countProjectComponents() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("projectcomponents", ProjectComponent.findAllProjectComponents());
        }
        return "projectcomponents/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ProjectComponentController.update(@Valid ProjectComponent projectComponent, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("projectComponent", projectComponent);
            return "projectcomponents/update";
        }
        projectComponent.merge();
        return "redirect:/projectcomponents/" + encodeUrlPathSegment(projectComponent.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ProjectComponentController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("projectComponent", ProjectComponent.findProjectComponent(id));
        return "projectcomponents/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ProjectComponentController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        ProjectComponent.findProjectComponent(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/projectcomponents?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("tasks")
    public Collection<Task> ProjectComponentController.populateTasks() {
        return Task.findAllTasks();
    }
    
    Converter<ProjectComponent, String> ProjectComponentController.getProjectComponentConverter() {
        return new Converter<ProjectComponent, String>() {
            public String convert(ProjectComponent projectComponent) {
                return new StringBuilder().append(projectComponent.getComponentId()).append(" ").append(projectComponent.getName()).append(" ").append(projectComponent.getDescription()).toString();
            }
        };
    }
    
    Converter<Task, String> ProjectComponentController.getTaskConverter() {
        return new Converter<Task, String>() {
            public String convert(Task task) {
                return new StringBuilder().append(task.getTaskId()).append(" ").append(task.getName()).append(" ").append(task.getDescription()).toString();
            }
        };
    }
    
    @PostConstruct
    void ProjectComponentController.registerConverters() {
        conversionService.addConverter(getProjectComponentConverter());
        conversionService.addConverter(getTaskConverter());
    }
    
    private String ProjectComponentController.encodeUrlPathSegment(String pathSegment, HttpServletRequest request) {
        String enc = request.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
