// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.timedesk.entity;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.timedesk.entity.Company;
import org.timedesk.entity.Project;

privileged aspect Project_Roo_Finder {
    
    public static TypedQuery<Project> Project.findProjectsByCompany(Company company) {
        if (company == null) throw new IllegalArgumentException("The company argument is required");
        EntityManager em = Project.entityManager();
        TypedQuery<Project> q = em.createQuery("SELECT Project FROM Project AS project WHERE project.company = :company", Project.class);
        q.setParameter("company", company);
        return q;
    }
    
    public static TypedQuery<Project> Project.findProjectsByName(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Project.entityManager();
        TypedQuery<Project> q = em.createQuery("SELECT Project FROM Project AS project WHERE project.name = :name", Project.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Project> Project.findProjectsByNameLike(String name) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() -1) != '%') {
            name = name + "%";
        }
        EntityManager em = Project.entityManager();
        TypedQuery<Project> q = em.createQuery("SELECT Project FROM Project AS project WHERE LOWER(project.name) LIKE LOWER(:name)", Project.class);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Project> Project.findProjectsByProjectIdLike(String projectId) {
        if (projectId == null || projectId.length() == 0) throw new IllegalArgumentException("The projectId argument is required");
        projectId = projectId.replace('*', '%');
        if (projectId.charAt(0) != '%') {
            projectId = "%" + projectId;
        }
        if (projectId.charAt(projectId.length() -1) != '%') {
            projectId = projectId + "%";
        }
        EntityManager em = Project.entityManager();
        TypedQuery<Project> q = em.createQuery("SELECT Project FROM Project AS project WHERE LOWER(project.projectId) LIKE LOWER(:projectId)", Project.class);
        q.setParameter("projectId", projectId);
        return q;
    }
    
}
